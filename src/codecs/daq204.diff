diff -ruN -x '*.in' -x '*.git*' -x '*m4*' daq-2.0.4-orig/README daq-2.0.4/README
--- daq-2.0.4-orig/README	2014-06-19 15:54:07.000000000 -0400
+++ daq-2.0.4/README	2015-05-03 09:26:48.000000000 -0400
@@ -277,6 +277,40 @@
 - Support for VALE and netmap pipes.
 
 
+Socket Module
+=============
+
+The socket module provides provides a stream socket server that will accept
+up to 2 simultaneous connections and bridge them together while also
+passing data to Snort++ for inspection.  The first connection accepted is
+considered the client and the second connection accepted is considered the
+server.  If there is only one connection, stream data can't be forwarded
+but it is still inspected.
+
+Each read from a socket of up to snaplen bytes is passed as a packet to
+Snort++ along with a DAQ_SktHdr_t pointer in DAQ_PktHdr_t->priv_ptr.
+DAQ_SktHdr_t conveys IP4 address, ports, protocol, and direction.  Socket
+packets can be configured to be TCP or UDP.  The socket DAQ can be operated
+in inline mode and is able to block packets.
+
+The socket DAQ uses DLT_SOCKET and requires that Snort++ load the socket
+codec which is included in the extra package.
+
+To use the socket DAQ, start Snort++ like this:
+
+    ./snort --plugin-path /path/to/lib/snort_extra \
+        --daq socket [--daq-var port=<port>] [--daq-var proto=<proto>] [-Q]
+
+    <port> ::= 1..65535; default is 8000
+    <proto> ::= tcp | udp
+
+* The socket DAQ only supports ip4 traffic.
+* The socket DAQ is only supported by Snort++.  It is not compatible with
+  Snort.
+
+This module is primarily for development and test.
+
+
 Notes on iptables
 =================
 
diff -ruN -x '*.in' -x '*.git*' -x '*m4*' daq-2.0.4-orig/api/daq_common.h daq-2.0.4/api/daq_common.h
--- daq-2.0.4-orig/api/daq_common.h	2014-09-09 15:57:29.000000000 -0400
+++ daq-2.0.4/api/daq_common.h	2015-05-06 15:07:45.000000000 -0400
@@ -113,6 +113,21 @@
     uint16_t address_space_id; /* Unique ID of the address space */
 } DAQ_PktHdr_t;
 
+#define DAQ_SKT_FLAG_TO_SERVER  0x01
+#define DAQ_SKT_FLAG_START_FLOW 0x02
+#define DAQ_SKT_FLAG_END_FLOW   0x04
+
+/* socket DAQ sets priv_ptr to this */
+typedef struct
+{
+    uint32_t src_addr;
+    uint32_t dst_addr;
+    uint16_t src_port;
+    uint16_t dst_port;
+    uint8_t ip_proto;
+    uint8_t flags;
+} DAQ_SktHdr_t;
+
 #define DAQ_METAHDR_TYPE_SOF        0
 #define DAQ_METAHDR_TYPE_EOF        1
 #define DAQ_METAHDR_TYPE_VPN_LOGIN  2
diff -ruN -x '*.in' -x '*.git*' -x '*m4*' daq-2.0.4-orig/configure.ac daq-2.0.4/configure.ac
--- daq-2.0.4-orig/configure.ac	2014-08-11 21:18:27.000000000 -0400
+++ daq-2.0.4/configure.ac	2015-02-15 16:05:27.000000000 -0500
@@ -207,6 +207,13 @@
 fi
 AM_CONDITIONAL([BUILD_NETMAP_MODULE], [test "$enable_netmap_module" = yes])
 
+# socket Module
+AC_ARG_ENABLE(socket-module,
+              AC_HELP_STRING([--disable-socket-module],[don't build the bundled socket module]),
+              [enable_socket_module="$enableval"], [enable_socket_module="$DEFAULT_ENABLE"])
+
+AM_CONDITIONAL([BUILD_SOCKET_MODULE], [test "$enable_socket_module" = yes])
+
 if test "$enable_ipq_module" = yes -o "$enable_nfq_module" = yes ; then
     AC_CHECK_HEADERS(dnet.h,,DNET_H="no")
     AC_CHECK_HEADERS(dumbnet.h,,DUMBNET_H="no")
@@ -297,4 +304,5 @@
 echo "Build NFQ DAQ module....... : $enable_nfq_module"
 echo "Build PCAP DAQ module...... : $enable_pcap_module"
 echo "Build netmap DAQ module...... : $enable_netmap_module"
+echo "Build socket DAQ module...... : $enable_socket_module"
 echo
diff -ruN -x '*.in' -x '*.git*' -x '*m4*' daq-2.0.4-orig/os-daq-modules/Makefile.am daq-2.0.4/os-daq-modules/Makefile.am
--- daq-2.0.4-orig/os-daq-modules/Makefile.am	2014-06-19 15:54:09.000000000 -0400
+++ daq-2.0.4/os-daq-modules/Makefile.am	2015-02-15 16:05:27.000000000 -0500
@@ -98,6 +98,17 @@
     libdaq_static_modules_la_CFLAGS += -DBUILD_NETMAP_MODULE
 endif
 
+if BUILD_SOCKET_MODULE
+if BUILD_SHARED_MODULES
+    pkglib_LTLIBRARIES += daq_socket.la
+    daq_socket_la_SOURCES = daq_socket.c
+    daq_socket_la_CFLAGS = -DBUILDING_SO
+    daq_socket_la_LDFLAGS = -module -export-dynamic -avoid-version -shared @XCCFLAGS@
+endif
+    libdaq_static_modules_la_SOURCES += daq_socket.c
+    libdaq_static_modules_la_CFLAGS += -DBUILD_SOCKET_MODULE
+endif
+
 INCLUDES = -I$(top_srcdir)/api -I$(top_srcdir)/sfbpf -I$(top_builddir)/sfbpf
 
 EXTRA_DIST = daq-modules-config.in
diff -ruN -x '*.in' -x '*.git*' -x '*m4*' daq-2.0.4-orig/os-daq-modules/daq_socket.c daq-2.0.4/os-daq-modules/daq_socket.c
--- daq-2.0.4-orig/os-daq-modules/daq_socket.c	1969-12-31 19:00:00.000000000 -0500
+++ daq-2.0.4/os-daq-modules/daq_socket.c	2015-05-06 12:10:38.000000000 -0400
@@ -0,0 +1,586 @@
+/*--------------------------------------------------------------------------
+** Copyright (C) 2015-2015 Cisco and/or its affiliates. All rights reserved.
+**
+** This program is free software; you can redistribute it and/or modify it
+** under the terms of the GNU General Public License Version 2 as published
+** by the Free Software Foundation.  You may not use, modify or distribute
+** this program under any other version of the GNU General Public License.
+**
+** This program is distributed in the hope that it will be useful, but
+** WITHOUT ANY WARRANTY; without even the implied warranty of
+** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+** General Public License for more details.
+**
+** You should have received a copy of the GNU General Public License along
+** with this program; if not, write to the Free Software Foundation, Inc.,
+** 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+**--------------------------------------------------------------------------*/
+/* daq_socket.c author Russ Combs <rucombs@cisco.com> */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <errno.h>
+#include <stdlib.h>
+#include <string.h>
+#include <stdio.h>
+
+#include <sys/types.h>
+#include <sys/time.h>
+#include <sys/unistd.h>
+
+#include <netinet/in.h>
+#include <sys/socket.h>
+#include <netinet/in_systm.h>
+#include <netinet/ip.h>
+
+#include "daq_api.h"
+#include "sfbpf/sfbpf_dlt.h"
+
+#define DAQ_MOD_VERSION 0
+#define DAQ_NAME "socket"
+#define DAQ_TYPE (DAQ_TYPE_INTF_CAPABLE | DAQ_TYPE_INLINE_CAPABLE | DAQ_TYPE_MULTI_INSTANCE)
+#define DEFAULT_PORT 8000
+
+typedef struct {
+    int sock_a;  // recv from b
+    int sock_b;  // recv from a
+    int sock_c;  // connect
+
+    int use_a;
+    int port;
+    int passive;
+    int stop;
+
+    unsigned timeout;
+    unsigned snaplen;
+
+    struct sockaddr_in sin_a;
+    struct sockaddr_in sin_b;
+
+    DAQ_SktHdr_t pci;
+
+    uint8_t* buf;
+    char error[DAQ_ERRBUF_SIZE];
+
+    DAQ_State state;
+    DAQ_Stats_t stats;
+} SockImpl;
+
+//-------------------------------------------------------------------------
+// socket functions
+//-------------------------------------------------------------------------
+
+static int sock_setup(SockImpl* impl)
+{
+    struct sockaddr_in sin;
+
+    if ( (impl->sock_c = socket(PF_INET, SOCK_STREAM, 0)) == -1 )
+    {
+        DPE(impl->error, "%s: can't create listener socket (%s)\n",
+            __FUNCTION__, strerror(errno));
+        return -1;
+    }
+
+    sin.sin_family = PF_INET;
+    sin.sin_addr.s_addr = INADDR_ANY;
+    sin.sin_port = htons(impl->port);
+
+    if ( bind(impl->sock_c, (struct sockaddr*)&sin, sizeof(sin)) == -1 )
+    {
+        DPE(impl->error, "%s: can't bind listener socket (%s)\n",
+            __FUNCTION__, strerror(errno));
+        return -1;
+    }
+
+    if ( listen(impl->sock_c, 2) == -1 )
+    {
+        DPE(impl->error, "%s: can't listen on socket (%s)\n",
+            __FUNCTION__, strerror(errno));
+        return -1;
+    }
+    return 0;
+}
+
+static void sock_cleanup(SockImpl* impl)
+{
+    if ( impl->sock_c >= 0 )
+        close(impl->sock_c);
+
+    if ( impl->sock_a >= 0 )
+        close(impl->sock_a);
+
+    if ( impl->sock_b >= 0 )
+        close(impl->sock_b);
+
+    impl->sock_c = impl->sock_a = impl->sock_b = -1;
+}
+
+static int sock_recv(SockImpl* impl, int* sock, struct sockaddr_in* psin)
+{
+    int n = recv(*sock, impl->buf, impl->snaplen, 0);
+
+    if ( n <= 0 )
+    {
+        if (errno != EINTR)
+        {
+            DPE(impl->error, "%s: can't recv from socket (%s)\n",
+                __FUNCTION__, strerror(errno));
+            *sock = -1;
+            psin->sin_addr.s_addr = 0;
+            psin->sin_port = 0;
+            impl->pci.flags = DAQ_SKT_FLAG_END_FLOW;
+        }
+        return 0;
+    }
+    return n;
+}
+
+static int sock_send(
+    SockImpl* impl, int sock, const uint8_t* buf, uint32_t len)
+{
+    if ( sock < 0 )
+        return 0;
+
+    int n = send(sock, buf, len, 0);
+
+    while ( 0 <= n && (uint32_t)n < len )
+    {
+        buf += n;
+        len -= n;
+        n = send(sock, buf, len, 0);
+    }
+    if ( n == -1 )
+    {
+        DPE(impl->error, "%s: can't send on socket (%s)\n",
+            __FUNCTION__, strerror(errno));
+        return -1;
+    }
+    return 0;
+}
+
+static int sock_accept(SockImpl* impl, int* sock, struct sockaddr_in* psin)
+{
+    const char* banner;
+    socklen_t len = sizeof(*psin);
+    *sock = accept(impl->sock_c, (struct sockaddr*)psin, &len);
+
+    if ( *sock == -1 )
+    {
+        DPE(impl->error, "%s: can't accept incoming connection (%s)\n",
+            __FUNCTION__, strerror(errno));
+        return -1;
+    }
+    banner = impl->use_a ? "client\n" : "server\n";
+    sock_send(impl, *sock, (const uint8_t*)banner, 7);
+
+    impl->pci.flags = DAQ_SKT_FLAG_START_FLOW;
+    return 0;
+}
+
+static int sock_poll(SockImpl* impl, int* sock, struct sockaddr_in* psin)
+{
+    int max_fd;
+    fd_set inputs;
+
+    if ( impl->sock_c < 0 )
+        return 0;
+
+    FD_ZERO(&inputs);
+    FD_SET(impl->sock_c, &inputs);
+    max_fd = impl->sock_c;
+
+    if ( *sock > 0 )
+    {
+        FD_SET(*sock, &inputs);
+
+        if ( *sock > max_fd )
+            max_fd = *sock;
+    }
+
+    struct timeval timeout;
+    timeout.tv_sec = 1;
+    timeout.tv_usec = 0;
+
+    if ( !select(max_fd+1, &inputs, NULL, NULL, &timeout) )
+        return 0;
+
+    else if ( *sock >= 0 && FD_ISSET(*sock, &inputs) )
+        return sock_recv(impl, sock, psin);
+
+    else if ( *sock < 0 && FD_ISSET(impl->sock_c, &inputs) )
+        return sock_accept(impl, sock, psin);
+
+    return 0;
+}
+
+//-------------------------------------------------------------------------
+// daq utilities
+//-------------------------------------------------------------------------
+
+static void set_pkt_hdr(SockImpl* impl, DAQ_PktHdr_t* phdr, ssize_t len)
+{
+    struct timeval t;
+    memset (&t, 0, sizeof(struct timeval));
+    gettimeofday(&t, NULL);
+
+    phdr->ts.tv_sec = t.tv_sec;
+    phdr->ts.tv_usec = t.tv_usec;
+    phdr->caplen = len;
+    phdr->pktlen = len;
+    phdr->ingress_index = -1;
+    phdr->egress_index = -1;
+    phdr->ingress_group = -1;
+    phdr->egress_group = -1;
+    phdr->flags = 0;
+    phdr->address_space_id = 0;
+    phdr->opaque = 0;
+
+    // use_a already toggled
+    if ( impl->use_a )
+    {
+        impl->pci.src_addr = impl->sin_b.sin_addr.s_addr;
+        impl->pci.dst_addr = impl->sin_a.sin_addr.s_addr;
+        impl->pci.src_port = impl->sin_b.sin_port;
+        impl->pci.dst_port = impl->sin_a.sin_port;
+        impl->pci.flags &= ~DAQ_SKT_FLAG_TO_SERVER;
+    }
+    else
+    {
+        impl->pci.src_addr = impl->sin_a.sin_addr.s_addr;
+        impl->pci.dst_addr = impl->sin_b.sin_addr.s_addr;
+        impl->pci.src_port = impl->sin_a.sin_port;
+        impl->pci.dst_port = impl->sin_b.sin_port;
+        impl->pci.flags |= DAQ_SKT_FLAG_TO_SERVER;
+    }
+
+    phdr->priv_ptr = &impl->pci;
+}
+
+// forward all but drops, retries and blacklists:
+static const int s_fwd[MAX_DAQ_VERDICT] = { 1, 0, 1, 1, 0, 1, 0 };
+
+static int socket_daq_process(
+    SockImpl* impl, DAQ_Analysis_Func_t cb, void* user)
+{
+    DAQ_PktHdr_t hdr;
+    int* sock = impl->use_a ? &impl->sock_a : &impl->sock_b;
+    struct sockaddr_in* psin = impl->use_a ? &impl->sin_a : &impl->sin_b;
+    impl->pci.flags = 0;
+
+    int n = sock_poll(impl, sock, psin);
+
+    // don't toggle w/o at least one connection so client is always 1st
+    if ( impl->sock_a > -1 || impl->sock_b > -1 )
+        impl->use_a = !impl->use_a;
+
+    if ( n <= 0 && !impl->pci.flags )
+        return n;
+
+    set_pkt_hdr(impl, &hdr, n);
+    DAQ_Verdict verdict = cb(user, &hdr, impl->buf);
+
+    if ( verdict >= MAX_DAQ_VERDICT )
+        verdict = DAQ_VERDICT_BLOCK;
+
+    impl->stats.verdicts[verdict]++;
+
+    if ( impl->passive || s_fwd[verdict] )
+    {
+        // already toggled use_a, so we get a->b or b->a
+        sock = impl->use_a ? &impl->sock_a : &impl->sock_b;
+        sock_send(impl, *sock, impl->buf, n);
+    }
+    return n;
+}
+
+static int socket_daq_config (
+    SockImpl* impl, const DAQ_Config_t* cfg, char* errBuf, size_t errMax)
+{
+    DAQ_Dict* entry;
+
+    if ( cfg->name )
+    {
+        char* end = NULL;
+        impl->port = (int)strtol(cfg->name, &end, 0);
+    }
+    for ( entry = cfg->values; entry; entry = entry->next)
+    {
+        if ( !entry->value || !*entry->value )
+        {
+            snprintf(errBuf, errMax,
+                "%s: variable needs value (%s)\n", __FUNCTION__, entry->key);
+                return DAQ_ERROR;
+        }
+        else if ( !strcmp(entry->key, "port") )
+        {
+            char* end = entry->value;
+            impl->port = (int)strtol(entry->value, &end, 0);
+
+            if ( *end || impl->port <= 0 || impl->port > 65535 )
+            {
+                snprintf(errBuf, errMax, "%s: bad port (%s)\n",
+                    __FUNCTION__, entry->value);
+                return DAQ_ERROR;
+            }
+        }
+        else if ( !strcmp(entry->key, "proto") )
+        {
+            if ( !strcmp(entry->value, "tcp") )
+                impl->pci.ip_proto = IPPROTO_TCP;
+
+            else if ( !strcmp(entry->value, "udp") )
+                impl->pci.ip_proto = IPPROTO_UDP;
+            else
+            {
+                snprintf(errBuf, errMax, "%s: bad proto (%s)\n",
+                    __FUNCTION__, entry->value);
+                return DAQ_ERROR;
+            }
+        }
+        else
+        {
+            snprintf(errBuf, errMax,
+                "%s: unsupported variable (%s=%s)\n",
+                    __FUNCTION__, entry->key, entry->value);
+                return DAQ_ERROR;
+        }
+    }
+    if ( !impl->pci.ip_proto )
+        impl->pci.ip_proto = IPPROTO_TCP;
+
+    if ( !impl->port )
+        impl->port = DEFAULT_PORT;
+
+    impl->snaplen = cfg->snaplen ? cfg->snaplen : IP_MAXPACKET;
+    impl->timeout = cfg->timeout;
+    impl->passive = ( cfg->mode == DAQ_MODE_PASSIVE );
+
+    return DAQ_SUCCESS;
+}
+
+//-------------------------------------------------------------------------
+// daq
+//-------------------------------------------------------------------------
+
+static void socket_daq_shutdown (void* handle)
+{
+    SockImpl* impl = (SockImpl*)handle;
+
+    if ( impl->buf )
+        free(impl->buf);
+
+    free(impl);
+}
+
+//-------------------------------------------------------------------------
+
+static int socket_daq_initialize (
+    const DAQ_Config_t* cfg, void** handle, char* errBuf, size_t errMax)
+{
+    SockImpl* impl = calloc(1, sizeof(*impl));
+
+    if ( !impl )
+    {
+        snprintf(errBuf, errMax, "%s: failed to allocate the ipfw context!",
+            __FUNCTION__);
+        return DAQ_ERROR_NOMEM;
+    }
+
+    if ( socket_daq_config(impl, cfg, errBuf, errMax) != DAQ_SUCCESS )
+    {
+        socket_daq_shutdown(impl);
+        return DAQ_ERROR;
+    }
+    impl->buf = malloc(impl->snaplen);
+
+    if ( !impl->buf )
+    {
+        snprintf(errBuf, errMax, "%s: failed to allocate the ipfw buffer!",
+            __FUNCTION__);
+        socket_daq_shutdown(impl);
+        return DAQ_ERROR_NOMEM;
+    }
+
+    impl->sock_c = impl->sock_a = impl->sock_b = -1;
+    impl->use_a = 1;
+    impl->state = DAQ_STATE_INITIALIZED;
+
+    *handle = impl;
+    return DAQ_SUCCESS;
+}
+
+//-------------------------------------------------------------------------
+
+static int socket_daq_start (void* handle)
+{
+    SockImpl* impl = (SockImpl*)handle;
+
+    if ( sock_setup(impl) )
+        return DAQ_ERROR;
+
+    impl->state = DAQ_STATE_STARTED;
+    return DAQ_SUCCESS;
+}
+
+static int socket_daq_stop (void* handle)
+{
+    SockImpl* impl = (SockImpl*)handle;
+    sock_cleanup(impl);
+    impl->state = DAQ_STATE_STOPPED;
+    return DAQ_SUCCESS;
+}
+
+//-------------------------------------------------------------------------
+
+static int socket_daq_inject (
+    void* handle, const DAQ_PktHdr_t* hdr, const uint8_t* buf, uint32_t len,
+    int reverse)
+{
+    SockImpl* impl = (SockImpl*)handle;
+    int sock;
+
+    if ( reverse )
+        sock = impl->use_a ? impl->sock_b : impl->sock_a;
+    else
+        sock = impl->use_a ? impl->sock_a : impl->sock_b;
+
+    int status = sock_send(impl, sock, buf, len);
+
+    if ( status )
+        return DAQ_ERROR;
+
+    impl->stats.packets_injected++;
+    return DAQ_SUCCESS;
+}
+
+//-------------------------------------------------------------------------
+
+static int socket_daq_acquire (
+    void* handle, int cnt, DAQ_Analysis_Func_t callback, DAQ_Meta_Func_t metaback, void* user)
+{
+    SockImpl* impl = (SockImpl*)handle;
+    int hit = 0, miss = 0;
+    impl->stop = 0;
+
+    while ( hit < cnt || cnt <= 0 )
+    {
+        int status = socket_daq_process(impl, callback, user);
+
+        if ( status > 0 )
+        {
+            hit++;
+            miss = 0;
+        }
+        else if ( status < 0 )
+            return DAQ_ERROR;
+
+        else if ( ++miss == 2 || impl->stop )
+            break;
+    }
+    return DAQ_SUCCESS;
+}
+
+//-------------------------------------------------------------------------
+
+static int socket_daq_breakloop (void* handle)
+{
+    SockImpl* impl = (SockImpl*)handle;
+    impl->stop = 1;
+    return DAQ_SUCCESS;
+}
+
+static DAQ_State socket_daq_check_status (void* handle)
+{
+    SockImpl* impl = (SockImpl*)handle;
+    return impl->state;
+}
+
+static int socket_daq_get_stats (void* handle, DAQ_Stats_t* stats)
+{
+    SockImpl* impl = (SockImpl*)handle;
+    *stats = impl->stats;
+    return DAQ_SUCCESS;
+}
+
+static void socket_daq_reset_stats (void* handle)
+{
+    SockImpl* impl = (SockImpl*)handle;
+    memset(&impl->stats, 0, sizeof(impl->stats));
+}
+
+static int socket_daq_get_snaplen (void* handle)
+{
+    SockImpl* impl = (SockImpl*)handle;
+    return impl->snaplen;
+}
+
+static uint32_t socket_daq_get_capabilities (void* handle)
+{
+    return DAQ_CAPA_BLOCK | DAQ_CAPA_REPLACE | DAQ_CAPA_INJECT | DAQ_CAPA_INJECT_RAW
+        | DAQ_CAPA_BREAKLOOP | DAQ_CAPA_UNPRIV_START;
+}
+
+static int socket_daq_get_datalink_type(void *handle)
+{
+    return DLT_SOCKET;
+}
+
+static const char* socket_daq_get_errbuf (void* handle)
+{
+    SockImpl* impl = (SockImpl*)handle;
+    return impl->error;
+}
+
+static void socket_daq_set_errbuf (void* handle, const char* s)
+{
+    SockImpl* impl = (SockImpl*)handle;
+    DPE(impl->error, "%s", s ? s : "");
+}
+
+static int socket_daq_get_device_index(void* handle, const char* device)
+{
+    return DAQ_ERROR_NOTSUP;
+}
+
+static int socket_daq_set_filter (void* handle, const char* filter)
+{
+    return DAQ_ERROR_NOTSUP;
+}
+
+//-------------------------------------------------------------------------
+
+#ifdef BUILDING_SO
+DAQ_SO_PUBLIC DAQ_Module_t DAQ_MODULE_DATA =
+#else
+DAQ_Module_t socket_daq_module_data =
+#endif
+{
+    .api_version = DAQ_API_VERSION,
+    .module_version = DAQ_MOD_VERSION,
+    .name = DAQ_NAME,
+    .type = DAQ_TYPE,
+    .initialize = socket_daq_initialize,
+    .set_filter = socket_daq_set_filter,
+    .start = socket_daq_start,
+    .acquire = socket_daq_acquire,
+    .inject = socket_daq_inject,
+    .breakloop = socket_daq_breakloop,
+    .stop = socket_daq_stop,
+    .shutdown = socket_daq_shutdown,
+    .check_status = socket_daq_check_status,
+    .get_stats = socket_daq_get_stats,
+    .reset_stats = socket_daq_reset_stats,
+    .get_snaplen = socket_daq_get_snaplen,
+    .get_capabilities = socket_daq_get_capabilities,
+    .get_datalink_type = socket_daq_get_datalink_type,
+    .get_errbuf = socket_daq_get_errbuf,
+    .set_errbuf = socket_daq_set_errbuf,
+    .get_device_index = socket_daq_get_device_index,
+    .modify_flow = NULL,
+    .hup_prep = NULL,
+    .hup_apply = NULL,
+    .hup_post = NULL,
+};
+
diff -ruN -x '*.in' -x '*.git*' -x '*m4*' daq-2.0.4-orig/os-daq-modules/daq_static_modules.c daq-2.0.4/os-daq-modules/daq_static_modules.c
--- daq-2.0.4-orig/os-daq-modules/daq_static_modules.c	2014-06-10 09:38:53.000000000 -0400
+++ daq-2.0.4/os-daq-modules/daq_static_modules.c	2015-02-19 17:22:50.000000000 -0500
@@ -41,5 +41,8 @@
 #ifdef BUILD_PCAP_MODULE
     &pcap_daq_module_data,
 #endif
+#ifdef BUILD_SOCKET_MODULE
+    &socket_daq_module_data,
+#endif
 };
 const int num_static_modules = sizeof(static_modules) / sizeof(static_modules[0]);
diff -ruN -x '*.in' -x '*.git*' -x '*m4*' daq-2.0.4-orig/os-daq-modules/daq_static_modules.h daq-2.0.4/os-daq-modules/daq_static_modules.h
--- daq-2.0.4-orig/os-daq-modules/daq_static_modules.h	2014-06-10 09:38:53.000000000 -0400
+++ daq-2.0.4/os-daq-modules/daq_static_modules.h	2015-02-15 16:05:27.000000000 -0500
@@ -39,3 +39,6 @@
 #ifdef BUILD_PCAP_MODULE
 extern const DAQ_Module_t pcap_daq_module_data;
 #endif
+#ifdef BUILD_SOCKET_MODULE
+extern const DAQ_Module_t socket_daq_module_data;
+#endif
diff -ruN -x '*.in' -x '*.git*' -x '*m4*' daq-2.0.4-orig/sfbpf/sfbpf_dlt.h daq-2.0.4/sfbpf/sfbpf_dlt.h
--- daq-2.0.4-orig/sfbpf/sfbpf_dlt.h	2014-06-10 09:38:55.000000000 -0400
+++ daq-2.0.4/sfbpf/sfbpf_dlt.h	2015-05-02 07:39:03.000000000 -0400
@@ -901,6 +901,9 @@
 #define DLT_IPV4			228
 #define DLT_IPV6			229
 
+/* for socket / proxy connections handling payload only */
+#define DLT_SOCKET          230
+
 /*
  * DLT and savefile link type values are split into a class and
  * a member of that class.  A class value of 0 indicates a regular
